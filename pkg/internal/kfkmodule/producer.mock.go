// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/gz00168ml/Documents/user_wallet/pkg/internal/kfkmodule/producer.go

// Package kfkmodule is a generated GoMock package.
package kfkmodule

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKfkProducer is a mock of KfkProducer interface.
type MockKfkProducer struct {
	ctrl     *gomock.Controller
	recorder *MockKfkProducerMockRecorder
}

// MockKfkProducerMockRecorder is the mock recorder for MockKfkProducer.
type MockKfkProducerMockRecorder struct {
	mock *MockKfkProducer
}

// NewMockKfkProducer creates a new mock instance.
func NewMockKfkProducer(ctrl *gomock.Controller) *MockKfkProducer {
	mock := &MockKfkProducer{ctrl: ctrl}
	mock.recorder = &MockKfkProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKfkProducer) EXPECT() *MockKfkProducerMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockKfkProducer) SendMessage(payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockKfkProducerMockRecorder) SendMessage(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockKfkProducer)(nil).SendMessage), payload)
}
